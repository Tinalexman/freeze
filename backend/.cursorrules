# Flutter PWA Platform MVP - Cursor Rule

## Project Overview
A minimal MVP platform that allows Flutter developers to share their apps as instantly-runnable PWAs by connecting GitHub repositories, automatically building Flutter web versions, and serving them with shareable links.

## Tech Stack (MVP)
- **Backend**: Go with Gin framework
- **Frontend**: Flutter Web
- **Database**: SQLite (for MVP simplicity)
- **Authentication**: GitHub OAuth 2.0
- **File Storage**: Local file system
- **Build System**: Direct Flutter CLI execution
- **Web Server**: Gin static file serving
- **Containerization**: Single Docker container

## Architecture Principles (MVP)

### 1. Keep It Simple
- Single Docker container deployment
- SQLite database (no external DB setup)
- Local file storage (no cloud storage)
- Direct Flutter CLI builds (no Docker-in-Docker)
- Simple authentication flow

### 2. Core Features Only
- GitHub OAuth login
- Repository listing and selection
- Flutter web build trigger
- Shareable app links
- Basic build status tracking

### 3. Rapid Development
- Shared structs between Go and Dart (JSON serialization)
- Simple REST API design
- Minimal error handling (log and continue)
- No queuing system initially

## Project Structure (Recommended)
```
flutter-pwa-platform/
├── backend/
│   ├── cmd/
│   │   └── server/
│   │       └── main.go
│   ├── internal/
│   │   ├── api/
│   │   │   ├── auth.go
│   │   │   ├── projects.go
│   │   │   └── builds.go
│   │   ├── models/
│   │   │   └── models.go
│   │   ├── services/
│   │   │   ├── github.go
│   │   │   ├── builder.go
│   │   │   └── database.go
│   │   └── config/
│   │       └── config.go
│   ├── go.mod
│   └── go.sum
├── frontend/
│   ├── lib/
│   │   ├── main.dart
│   │   ├── models/
│   │   │   └── models.dart
│   │   ├── services/
│   │   │   ├── api_service.dart
│   │   │   └── auth_service.dart
│   │   ├── screens/
│   │   │   ├── home_screen.dart
│   │   │   ├── login_screen.dart
│   │   │   ├── projects_screen.dart
│   │   │   └── project_detail_screen.dart
│   │   └── widgets/
│   │       └── common_widgets.dart
│   ├── web/
│   ├── pubspec.yaml
│   └── pubspec.lock
├── shared/
│   ├── models/
│   │   └── api_types.json    # Shared type definitions
│   └── scripts/
│       └── generate_types.sh # Script to generate Go/Dart types
├── storage/
│   ├── builds/
│   └── temp/
├── docker-compose.yml
├── Dockerfile
├── Makefile
└── README.md
```

## Development Workflow Benefits

### Separate Development Commands
```bash
# Backend development
cd backend
go run cmd/server/main.go

# Frontend development  
cd frontend
flutter run -d web-server --web-port 3000

# Full stack development
make dev  # Runs both simultaneously
```

### Clean Build Process
```bash
# Build backend only
cd backend && go build -o ../build/server cmd/server/main.go

# Build frontend only
cd frontend && flutter build web --output ../build/web

# Build both
make build
```

## Core Data Models

### Go Models
```go
// internal/models/models.go
package models

import (
    "time"
    "gorm.io/gorm"
)

type User struct {
    ID          uint   `json:"id" gorm:"primaryKey"`
    GitHubID    int    `json:"github_id" gorm:"uniqueIndex"`
    Username    string `json:"username"`
    Email       string `json:"email"`
    AccessToken string `json:"-"` // Don't serialize to JSON
    AvatarURL   string `json:"avatar_url"`
    CreatedAt   time.Time `json:"created_at"`
    UpdatedAt   time.Time `json:"updated_at"`
}

type Project struct {
    ID          uint      `json:"id" gorm:"primaryKey"`
    UserID      uint      `json:"user_id"`
    Name        string    `json:"name"`
    Description string    `json:"description"`
    RepoURL     string    `json:"repo_url"`
    Branch      string    `json:"branch" gorm:"default:main"`
    Status      string    `json:"status" gorm:"default:pending"`
    ShareURL    string    `json:"share_url"`
    CreatedAt   time.Time `json:"created_at"`
    UpdatedAt   time.Time `json:"updated_at"`
    User        User      `json:"user"`
}

type Build struct {
    ID          uint      `json:"id" gorm:"primaryKey"`
    ProjectID   uint      `json:"project_id"`
    CommitHash  string    `json:"commit_hash"`
    Status      string    `json:"status" gorm:"default:pending"`
    ErrorMsg    string    `json:"error_message"`
    StartedAt   *time.Time `json:"started_at"`
    CompletedAt *time.Time `json:"completed_at"`
    CreatedAt   time.Time `json:"created_at"`
    Project     Project   `json:"project"`
}
```

### Dart Models
```dart
// lib/models/models.dart
class User {
  final int id;
  final int githubId;
  final String username;
  final String email;
  final String avatarUrl;
  final DateTime createdAt;
  final DateTime updatedAt;

  User({
    required this.id,
    required this.githubId,
    required this.username,
    required this.email,
    required this.avatarUrl,
    required this.createdAt,
    required this.updatedAt,
  });

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      id: json['id'],
      githubId: json['github_id'],
      username: json['username'],
      email: json['email'],
      avatarUrl: json['avatar_url'],
      createdAt: DateTime.parse(json['created_at']),
      updatedAt: DateTime.parse(json['updated_at']),
    );
  }
}

class Project {
  final int id;
  final int userId;
  final String name;
  final String description;
  final String repoUrl;
  final String branch;
  final String status;
  final String shareUrl;
  final DateTime createdAt;
  final DateTime updatedAt;
  final User user;

  Project({
    required this.id,
    required this.userId,
    required this.name,
    required this.description,
    required this.repoUrl,
    required this.branch,
    required this.status,
    required this.shareUrl,
    required this.createdAt,
    required this.updatedAt,
    required this.user,
  });

  factory Project.fromJson(Map<String, dynamic> json) {
    return Project(
      id: json['id'],
      userId: json['user_id'],
      name: json['name'],
      description: json['description'],
      repoUrl: json['repo_url'],
      branch: json['branch'],
      status: json['status'],
      shareUrl: json['share_url'],
      createdAt: DateTime.parse(json['created_at']),
      updatedAt: DateTime.parse(json['updated_at']),
      user: User.fromJson(json['user']),
    );
  }
}
```

## API Endpoints (MVP)

### Authentication
```go
// internal/api/auth.go
GET  /api/auth/login     - Redirect to GitHub OAuth
GET  /api/auth/callback  - Handle GitHub OAuth callback
GET  /api/auth/me        - Get current user
POST /api/auth/logout    - Logout (clear session)
```

### Projects
```go
// internal/api/projects.go
GET  /api/projects           - List user's projects
POST /api/projects           - Create new project
GET  /api/projects/:id       - Get project details
PUT  /api/projects/:id       - Update project
DELETE /api/projects/:id     - Delete project
POST /api/projects/:id/build - Trigger build
```

### GitHub Integration
```go
// internal/api/github.go
GET /api/github/repos - List user's GitHub repositories
```

## Database Schema (SQLite)

```sql
-- Users table
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    github_id INTEGER UNIQUE NOT NULL,
    username TEXT NOT NULL,
    email TEXT,
    access_token TEXT NOT NULL,
    avatar_url TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Projects table
CREATE TABLE projects (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    repo_url TEXT NOT NULL,
    branch TEXT DEFAULT 'main',
    status TEXT DEFAULT 'pending',
    share_url TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Builds table
CREATE TABLE builds (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    project_id INTEGER NOT NULL,
    commit_hash TEXT NOT NULL,
    status TEXT DEFAULT 'pending',
    error_message TEXT,
    started_at DATETIME,
    completed_at DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE
);
```

## Docker Configuration (MVP)

```dockerfile
# Dockerfile
FROM golang:1.21-alpine AS go-builder

WORKDIR /app
COPY backend/ ./
RUN go mod download
RUN CGO_ENABLED=0 GOOS=linux go build -o server ./cmd/server

# Flutter stage
FROM cirrusci/flutter:3.16.0 AS flutter-builder

WORKDIR /app
COPY frontend/ ./
RUN flutter pub get
RUN flutter build web --release

# Final stage
FROM cirrusci/flutter:3.16.0

# Install git for cloning repos
RUN apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*

# Copy Go server
COPY --from=go-builder /app/server /usr/local/bin/server

# Copy Flutter web build
COPY --from=flutter-builder /app/build/web /app/web

# Create storage directories
RUN mkdir -p /app/storage/builds /app/storage/temp

# Enable Flutter web
RUN flutter config --enable-web
RUN flutter precache --web

WORKDIR /app

EXPOSE 8080

CMD ["/usr/local/bin/server"]
```

```yaml
# docker-compose.yml
version: '3.8'

services:
  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8080
    volumes:
      - ./storage:/app/storage
      - ./data:/app/data  # For SQLite database
```

## Makefile for Development

```makefile
# Makefile
.PHONY: dev build clean test

# Development
dev:
	@echo "Starting development servers..."
	@make -j2 dev-backend dev-frontend

dev-backend:
	@echo "Starting Go backend..."
	cd backend && go run cmd/server/main.go

dev-frontend:
	@echo "Starting Flutter web..."
	cd frontend && flutter run -d web-server --web-port 3000

# Build
build:
	@echo "Building application..."
	@make build-backend build-frontend

build-backend:
	@echo "Building Go backend..."
	cd backend && go build -o ../build/server cmd/server/main.go

build-frontend:
	@echo "Building Flutter web..."
	cd frontend && flutter build web --output ../build/web

# Testing
test:
	@echo "Running tests..."
	cd backend && go test ./...
	cd frontend && flutter test

# Clean
clean:
	@echo "Cleaning build artifacts..."
	rm -rf build/
	rm -rf frontend/build/
	rm -rf storage/builds/*
	rm -rf storage/temp/*

# Docker
docker-build:
	docker-compose build

docker-up:
	docker-compose up -d

docker-down:
	docker-compose down

docker-logs:
	docker-compose logs -f

# Setup
setup:
	@echo "Setting up development environment..."
	cd backend && go mod download
	cd frontend && flutter pub get
	mkdir -p storage/builds storage/temp data
	cp .env.example .env
	@echo "Don't forget to update .env with your GitHub credentials!"
```

## Go Backend Implementation

### Main Server
```go
// cmd/server/main.go
package main

import (
    "log"
    "github.com/gin-gonic/gin"
    "your-project/internal/api"
    "your-project/internal/config"
    "your-project/internal/services"
)

func main() {
    cfg := config.Load()
    
    // Initialize database
    db := services.InitDB()
    
    // Initialize services
    githubService := services.NewGitHubService(cfg.GitHubClientID, cfg.GitHubClientSecret)
    builderService := services.NewBuilderService()
    
    // Initialize API handlers
    authHandler := api.NewAuthHandler(db, githubService)
    projectsHandler := api.NewProjectsHandler(db, builderService)
    
    // Setup routes
    r := gin.Default()
    
    // Serve Flutter web app
    r.Static("/", "./web")
    
    // API routes
    apiRoutes := r.Group("/api")
    {
        authRoutes := apiRoutes.Group("/auth")
        {
            authRoutes.GET("/login", authHandler.Login)
            authRoutes.GET("/callback", authHandler.Callback)
            authRoutes.GET("/me", authHandler.Me)
            authRoutes.POST("/logout", authHandler.Logout)
        }
        
        projectRoutes := apiRoutes.Group("/projects")
        {
            projectRoutes.GET("/", projectsHandler.List)
            projectRoutes.POST("/", projectsHandler.Create)
            projectRoutes.GET("/:id", projectsHandler.Get)
            projectRoutes.PUT("/:id", projectsHandler.Update)
            projectRoutes.DELETE("/:id", projectsHandler.Delete)
            projectRoutes.POST("/:id/build", projectsHandler.Build)
        }
        
        apiRoutes.GET("/github/repos", authHandler.ListRepos)
    }
    
    // Serve built Flutter apps
    r.Static("/apps", "./storage/builds")
    
    log.Printf("Server starting on port %s", cfg.Port)
    r.Run(":" + cfg.Port)
}
```

### Build Service
```go
// internal/services/builder.go
package services

import (
    "fmt"
    "os"
    "os/exec"
    "path/filepath"
    "strings"
)

type BuilderService struct {
    storageDir string
    tempDir    string
}

func NewBuilderService() *BuilderService {
    return &BuilderService{
        storageDir: "./storage/builds",
        tempDir:    "./storage/temp",
    }
}

func (s *BuilderService) BuildProject(projectID uint, repoURL, branch string) error {
    projectDir := fmt.Sprintf("%s/%d", s.tempDir, projectID)
    outputDir := fmt.Sprintf("%s/%d", s.storageDir, projectID)
    
    // Clean up previous builds
    os.RemoveAll(projectDir)
    os.RemoveAll(outputDir)
    
    // Clone repository
    cmd := exec.Command("git", "clone", "-b", branch, repoURL, projectDir)
    if err := cmd.Run(); err != nil {
        return fmt.Errorf("failed to clone repository: %w", err)
    }
    
    // Check if it's a Flutter project
    if _, err := os.Stat(filepath.Join(projectDir, "pubspec.yaml")); os.IsNotExist(err) {
        return fmt.Errorf("not a Flutter project: pubspec.yaml not found")
    }
    
    // Install dependencies
    cmd = exec.Command("flutter", "pub", "get")
    cmd.Dir = projectDir
    if err := cmd.Run(); err != nil {
        return fmt.Errorf("failed to install dependencies: %w", err)
    }
    
    // Build for web
    cmd = exec.Command("flutter", "build", "web", "--release")
    cmd.Dir = projectDir
    if err := cmd.Run(); err != nil {
        return fmt.Errorf("failed to build Flutter web: %w", err)
    }
    
    // Copy build output
    srcDir := filepath.Join(projectDir, "build", "web")
    cmd = exec.Command("cp", "-r", srcDir, outputDir)
    if err := cmd.Run(); err != nil {
        return fmt.Errorf("failed to copy build output: %w", err)
    }
    
    // Clean up temp directory
    os.RemoveAll(projectDir)
    
    return nil
}
```

## Flutter Frontend Implementation

### Main App
```dart
// lib/main.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'services/auth_service.dart';
import 'services/api_service.dart';
import 'screens/home_screen.dart';
import 'screens/login_screen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthService()),
        Provider(create: (_) => ApiService()),
      ],
      child: MaterialApp(
        title: 'Flutter PWA Platform',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        home: Consumer<AuthService>(
          builder: (context, authService, _) {
            return authService.isAuthenticated ? HomeScreen() : LoginScreen();
          },
        ),
      ),
    );
  }
}
```

### API Service
```dart
// lib/services/api_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/models.dart';

class ApiService {
  final String baseUrl = 'http://localhost:8080/api';

  Future<List<Project>> getProjects() async {
    final response = await http.get(
      Uri.parse('$baseUrl/projects'),
      headers: {'Content-Type': 'application/json'},
    );

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(response.body);
      return data.map((json) => Project.fromJson(json)).toList();
    } else {
      throw Exception('Failed to load projects');
    }
  }

  Future<Project> createProject(Map<String, dynamic> projectData) async {
    final response = await http.post(
      Uri.parse('$baseUrl/projects'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode(projectData),
    );

    if (response.statusCode == 201) {
      return Project.fromJson(json.decode(response.body));
    } else {
      throw Exception('Failed to create project');
    }
  }

  Future<void> buildProject(int projectId) async {
    final response = await http.post(
      Uri.parse('$baseUrl/projects/$projectId/build'),
      headers: {'Content-Type': 'application/json'},
    );

    if (response.statusCode != 200) {
      throw Exception('Failed to trigger build');
    }
  }
}
```

## Environment Variables

```env
# .env
GITHUB_CLIENT_ID=your_github_client_id
GITHUB_CLIENT_SECRET=your_github_client_secret
JWT_SECRET=your_jwt_secret
PORT=8080
```

## Development Workflow

### 1. Setup
```bash
# Clone your repo
git clone <your-repo>
cd flutter-pwa-platform

# Set up environment using Makefile
make setup

# Edit .env with your GitHub OAuth credentials
nano .env

# Build and run with Docker
make docker-build
make docker-up
```

### 2. Development Flow
```bash
# Start both backend and frontend in development mode
make dev

# Or run them separately
make dev-backend   # Runs Go server on :8080
make dev-frontend  # Runs Flutter web on :3000

# Build for production
make build

# Run tests
make test
```

### 3. Project-Specific Commands
```bash
# Backend only
cd backend
go run cmd/server/main.go
go test ./...
go mod tidy

# Frontend only
cd frontend
flutter run -d web-server --web-port 3000
flutter test
flutter analyze
flutter build web
```

### 3. Testing
```bash
# Test the full flow
curl -X POST http://localhost:8080/api/projects \
  -H "Content-Type: application/json" \
  -d '{"name":"Test App","repo_url":"https://github.com/user/flutter-app","branch":"main"}'
```

## MVP Features Checklist

### Core Features
- [ ] GitHub OAuth authentication
- [ ] List user's GitHub repositories
- [ ] Create project from GitHub repo
- [ ] Trigger Flutter web build
- [ ] Serve built app at shareable URL
- [ ] Basic error handling and logging

### UI Features
- [ ] Login screen with GitHub OAuth
- [ ] Projects list screen
- [ ] Add project screen
- [ ] Project details with build status
- [ ] Share link with copy functionality

### Technical Features
- [ ] SQLite database setup
- [ ] JWT session management
- [ ] Flutter CLI build integration
- [ ] Static file serving
- [ ] Basic containerization

## Future Enhancements (Post-MVP)

### Phase 2
- Build queue system with Redis
- Real-time build status updates
- Build logs viewer
- Custom domain support
- Better error handling

### Phase 3
- Docker-in-Docker for isolation
- CDN integration
- Multiple Flutter SDK versions
- Team collaboration features
- Analytics and monitoring

## Code Quality Standards

- Go: Use `gofmt`, `golint`, and `go vet`
- Flutter: Use `flutter analyze` and `dart format`
- Git: Conventional commits
- Testing: Unit tests for critical paths
- Documentation: README and inline comments

## Security Considerations (MVP)

- Store GitHub tokens securely
- Validate repository URLs
- Limit build execution time
- Basic rate limiting
- Input sanitization

## Deployment (MVP)

```bash
# Production deployment
docker-compose -f docker-compose.prod.yml up -d

# Or simple deployment
docker build -t flutter-pwa-platform .
docker run -p 8080:8080 -e GITHUB_CLIENT_ID=xxx -e GITHUB_CLIENT_SECRET=xxx flutter-pwa-platform
```

This MVP cursor rule focuses on getting a working prototype quickly with minimal complexity. You can build upon this foundation and add more sophisticated features as needed.